/*
Given an integer x, return true if x is palindrome integer.

An integer is a palindrome when it reads the same backward as forward.

For example, 121 is a palindrome while 123 is not.
 

Example 1:

Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.
Example 2:

Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
 

Constraints:

-231 <= x <= 231 - 1
 

Follow up: Could you solve it without converting the integer to a string?
*/
class Solution {
public:
    bool isPalindrome(int x) {
        if(x<0){
            return false;
        }
        int y  = x;
        vector<int> val;
        while(y != 0 ){
            int ans = y%10;
            val.push_back(ans);
            y = y/10;
        }
        int i = 0, j = val.size() - 1;
        while(i < j){
            if(val[i] != val[j]){
                return false;
            }
            i++;
            j--;
        }
        return true;
    } 
};
